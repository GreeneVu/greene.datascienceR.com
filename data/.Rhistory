#these places with underscore
mydf2 <-head(mydf)
names(mydf2) <- gsub("\\.", "_", names(mydf2))
View(mydf2)
mydf$Date <- as.Date(paste(mydf$Date), format= "%d/%m/%Y")
class(mydf$Date)
View(mydf)
mydf %>% separate(Date, c("Date","Month","Year"),"-")
mydf %>% separate(Date, c("Year","Month","Date"),"-")
#4. Change the type of the column called "Date" from character to Date
#data type
mydf$Date <- as.Date(paste(mydf$Date), format= "%d/%m/%Y")
class(mydf$Date)
#5. Add two new columns for the month and year of he data in each file,
#you may extract the contents of this column from the Date column. Please
#note that the data are collected for the 19 months across 3 years
mydf %>% separate(Date, c("Year","Month","Date"),"-")
View(mydf)
setwd("/Users/greenevu/IntroDataScience/Assignment1/data")
##################### PART A #####################
#Load these files into working directory, one by one
help(package = "datasets")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("plyr")
install.packages("readr")
library("dplyr")
library("plyr")
library("readr")
library("tidyverse")
data1 <- read.csv("data/201808.csv", skip = 7)
data2 <- read.csv("data/201809.csv", skip = 7)
data3 <- read.csv("data/201810.csv", skip = 7)
data4 <- read.csv("data/201811.csv", skip = 7)
data5 <- read.csv("data/201812.csv", skip = 7)
data6 <- read.csv("data/201901.csv", skip = 7)
data7 <- read.csv("data/201902.csv", skip = 7)
data8 <- read.csv("data/201903.csv", skip = 7)
data9 <- read.csv("data/201904.csv", skip = 7)
data10 <- read.csv("data/201905.csv", skip = 7)
data11 <- read.csv("data/201906.csv", skip = 7)
data12 <- read.csv("data/201907.csv", skip = 7)
data13 <- read.csv("data/201908.csv", skip = 7)
data14 <- read.csv("data/201909.csv", skip = 7)
data15 <- read.csv("data/201910.csv", skip = 7)
data16 <- read.csv("data/201911.csv", skip = 7)
data17 <- read.csv("data/201912.csv", skip = 7)
data18 <- read.csv("data/202001.csv", skip = 7)
data19 <- read.csv("data/202002.csv", skip = 7)
mydf <- ldply(list.files(), read.csv, skip=7, header=TRUE)
View(mydf)
#Concatenate all the data of these file into one dataframe
list.files()
##################### PART B #####################
#1.Remove the variables, which have no data at all
remove_na_var <- mydf[ , colSums(is.na(mydf)) < nrow(mydf)]
View(mydf)
#2.Drop the variables, which have few data
drop_var = mydf[,!sapply(mydf, function(x) mean(is.na(x)))>0.9]
#3.Change the column names to have no spaces between words and replace
#these places with underscore
mydf2 <-head(mydf)
names(mydf2) <- gsub("\\.", "_", names(mydf2))
View(mydf2)
#3.Change the column names to have no spaces between words and replace
#these places with underscore
#mydf2 <-head(mydf)
names(mydf) <- gsub("\\.", "_", names(mydf))
View(mydf)
#4. Change the type of the column called "Date" from character to Date
#data type
mydf$Date <- as.Date(paste(mydf$Date), format= "%d/%m/%Y")
class(mydf$Date)
#5. Add two new columns for the month and year of he data in each file,
#you may extract the contents of this column from the Date column. Please
#note that the data are collected for the 19 months across 3 years
mydf %>% separate(Date, c("Year","Month","Date"),"-")
View(mydf)
ggplot(data = mpg)
library(tidyverse)
#Run ggplot(data = mpg). What do you see?
ggplot(data = mpg)
ggplot(data= mpg, aes(x= cty, y= hwy)) + geom_point() +
theme_minimal() +
ggtitle("Relationship between hwy and cty")
nrow(mpg)
ncol(mpg)
glimpse(mpg)
#Make a scatterplot of hwyvscyl.
ggplot(data = mpg)+
geom_point(mapping = aes(x=cyl, y=hwy, colour=class))
#Make a scatterplot of hwyvscyl.
ggplot(data = mpg)+
geom_point(mapping = aes(x=cyl, y=hwy))
#3.
ggplot(data = mpg)+
geom_point(mapping = aes(x=cyl, y=hwy, colour="red"))
#3.
ggplot(data = mpg)+
geom_point(mapping = aes(x=cyl, y=hwy, colour=class))
#4.
ggplot(data = mpg)+
geom_point(mapping = aes(x=class, y=drv))
#Exercise2
#1. Create a scatter plot between the engine displacement (i.e. displ) and highway miles per gallon (i.e. hwy).
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y=hwy))
#Add a smooth line to show the correlation between the variables in the last graph
geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=0.95)
#Add a smooth line to show the correlation between the variables in the last graph
geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=0.95)
#Exercise2
#1. Create a scatter plot between the engine displacement (i.e. displ) and highway miles per gallon (i.e. hwy).
p<- ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y=hwy))
#Add a smooth line to show the correlation between the variables in the last graph
p + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=0.95)
#Add a smooth line to show the correlation between the variables in the last graph
p<- ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+geom_smooth()
#Add a smooth line to show the correlation between the variables in the last graph
p<- ggplot(data = mpg,mapping = aes(x=displ, y=hwy))+
geom_point()+
geom_smooth()
#Exercise2
#1. Create a scatter plot between the engine displacement (i.e. displ) and highway miles per gallon (i.e. hwy).
p<- ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y=hwy))
#Exercise2
#1. Create a scatter plot between the engine displacement (i.e. displ) and highway miles per gallon (i.e. hwy).
p<- ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y=hwy))
#Exercise2
#1. Create a scatter plot between the engine displacement (i.e. displ) and highway miles per gallon (i.e. hwy).
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y=hwy))
#Add a smooth line to show the correlation between the variables in the last graph
ggplot(data = mpg,mapping = aes(x=displ, y=hwy))+
geom_point()+
geom_smooth()
#Add a smooth line to show the correlation between the variables in the last graph
ggplot(data = mpg,mapping = aes(x=displ, y=hwy))+
geom_point()+
geom_smooth()
#Add a smooth line to show the correlation between the variables in the last graph
ggplot(mpg,mapping = aes(x=displ, y=hwy))+
geom_point()+
geom_smooth()
#Add a smooth line to show the correlation between the variables in the last graph
ggplot(mpg, aes(x=displ, y=hwy))+
geom_point()+
geom_smooth()
#Exercise2
#1. Create a scatter plot between the engine displacement (i.e. displ) and highway miles per gallon (i.e. hwy).
ggplot(data = mpg, mapping = aes(x=displ, y=hwy))+
geom_point(colours("red"))+
geom_jitter(colour = "green")
#Exercise2
#1. Create a scatter plot between the engine displacement (i.e. displ) and highway miles per gallon (i.e. hwy).
ggplot(data = mpg, mapping = aes(x=displ, y=hwy))+
geom_point(colour = "red")+
geom_jitter(colour = "green")
#Create a bar chart to show the frequencies of the different classes of the cars.
ggplot(data = mpg, aes(x=class))+
geom_bar()
#5- Change the ticks of the x-axis
ggplot(data = mpg, aes(x = hwy))+
geom_histogram()+
scale_x_continuous(name="",
breaks = seq(min(mpg$hwy),max(mpg$hwy),3),
limits = c(min(mpg$hwy),max(mpg$hwy)))
#6- Add a vertical line to represent the median value of the variable on the distribution
median_value = median(pmg$hwy)
#6- Add a vertical line to represent the median value of the variable on the distribution
median_value = median(mpg$hwy)
#Exercise3
#1- Create a bar chart for the distribution of car classes
ggplot(mpg, aes(x=classs))+
geom_bar()
#Exercise3
#1- Create a bar chart for the distribution of car classes
ggplot(mpg, aes(x=class))+
geom_bar()
#2- Change the fill of the bars to be aligned with the car type of drive
ggplot(mpg, aes(x=class, fill=drv))+
geom_bar(position = "fill")+
scale_y_continuous(labels = )
View(mydf)
#5. Add two new columns for the month and year of he data in each file,
#you may extract the contents of this column from the Date column. Please
#note that the data are collected for the 19 months across 3 years
mydf %>% separate(Date, c("Year","Month","Date"),"-")
#5. Add two new columns for the month and year of he data in each file,
#you may extract the contents of this column from the Date column. Please
#note that the data are collected for the 19 months across 3 years
mydf <- mydf %>% separate(Date, c("Year","Month","Date"),"-")
View(mydf)
#6. Change the type of the "Month" and "Year" columns from character to
#Ordinal with levels as the number of months in a year (12) and no of year(3)
class(mydf$Year)
levels(mydf$Year)
levels(mydf)
mydf$Year <- as.numeric(c("2018", "2019", "2020"))
mydf$Year <- as.numeric(c(2018, 2019, 2020))
mydf$Year <- as.numeric(mydf$Year, levels=c(2018, 2019, 2020))
class(mydf$Year)
#6. Change the type of the "Month" and "Year" columns from character to
#Ordinal with levels as the number of months in a year (12) and no of year(3)
class(mydf$Year)
class(mydf$Month)
levels(mydf$Year)
class(mydf$Year)
levels(mydf$Year)
levels(mydf$Year)=c(2018, 2019, 2020)
levels(mydf$Year)
#6. Change the type of the "Month" and "Year" columns from character to
#Ordinal with levels as the number of months in a year (12) and no of year(3)
mydf$Year <- as.numeric(mydf$Year)
levels(mydf$Year)=c(2018, 2019, 2020)
mydf$Month <- as.numeric(mydf$Month)
levels(mydf$Month)=c(1,2,3,4,5,6,7,8,9,10,11,12)
levels(mydf$Month
levels(mydf$Month)
levels(mydf$Month)
levels(mydf$Year)
View(remove_na_var)
View(drop_var)
View(mydf)
mydf <- mydf[ , colSums(is.na(mydf)) < nrow(mydf)]
mydf = mydf[,!sapply(mydf, function(x) mean(is.na(x)))>0.9]
view(mydf)
View(mydf)
mydf$X9am_cloud_amount__oktas_[is.na(mydf$X9am_cloud_amount__oktas_)] <-
median(mydf$X9am_cloud_amount__oktas_, na.rm = TRUE)
view(mydf)
mydf$X3pm_cloud_amount__oktas_[is.na(mydf$X3pm_cloud_amount__oktas_)] <-
median(mydf$X3pm_cloud_amount__oktas_, na.rm = TRUE)
view(mydf)
#1a. Print the summary of 'Minimum_temperature'
summary(mydf$Minimum_temperature)
#1b. Print the summary of '9am_temperature'
summary(mydf$X9am_Temperature)
#1c. Print the summary of 'Speed_of_maximum_wind_gust_(km/h)'
summary(mydf$Speed_of_maximum_wind_gust__km_h_)
expenses %>% group_by(month=floor_date(date, "month")) %>%
summarize(amount=sum(amount))
mydf$Speed_of_maximum_wind_gust__km_h_[is.na(mydf$Speed_of_maximum_wind_gust__km_h_)] <-
median(mydf$Speed_of_maximum_wind_gust__km_h_, na.rm = TRUE)
summary(mydf$Maximum_temperature
summary(mydf$Maximum_temperature)
summary(mydf$Maximum_temperature)
summary(mydf$Rainfall__mm_)
summary(mydf$Direction_of_maximum_wind_gust)
summary(mydf$Time_of_maximum_wind_gust)
summary(mydf$X9am_Temperature)
summary(mydf$X9am_relative_humidity____)
summary(mydf$X9am_cloud_amount__oktas_)
summary(mydf$X9am_wind_direction)
summary(mydf$X9am_wind_speed__km_h_)
summary(mydf$X9am_MSL_pressure__hPa_)
summary(mydf$X9am_MSL_pressure__hPa_)
summary(mydf$X3pm_Temperature)
summary(mydf$X3pm_relative_humidity____)
summary(mydf$X3pm_cloud_amount__oktas_)
summary(mydf$X3pm_wind_direction)
summary(mydf$X3pm_wind_speed__km_h_)
aggregate( Minimum_temperature ~ Month + Year , mydf , average )
aggregate( Minimum_temperature ~ Month + Year , mydf , mean)
aggregate( Minimum_temperature ~ Year , mydf , mean)
aggregate( Minimum_temperature ~ Month + Year , mydf , mean)
aggregate(Speed_of_maximum_wind_gust__km_h_ ~ Direction_of_maximum_wind_gust , mydf , mean)
#3. Extracting the average of speed of maximum wind gust by direction
#of maximum wind gust
average_windgust <-
aggregate(Speed_of_maximum_wind_gust__km_h_ ~ Direction_of_maximum_wind_gust , mydf , mean)
view(average_windgust)
# 1- What month had the highest proportion of cancelled flights?
cancelled_flights <- filter(flights, is.na(air_time))
# Load the 'nycflights13' dataset into a frame and then find all flights that:
library(tidyverse)
# Load the 'nycflights13' dataset into a frame and then find all flights that:
library(tidyverse)
# Load the 'nycflights13' dataset into a frame and then find all flights that:
library(tidyverse)
library(nycflights13)
# 1- What month had the highest proportion of cancelled flights?
cancelled_flights <- filter(flights, is.na(air_time))
View(cancelled_flights)
grouped_by_month <- group_by(cancelled_flights, month)
counts_per_month <- summarise(grouped_by_month, count = n())
highest_prop <- summarise(counts_per_month, max_month= month[which.max(count)], max_value= max(count))
View(grouped_by_month)
counts_per_month <- summarise(grouped_by_month, count = n())
View(mydf)
View(mydf)
dry_month <- filter(mydf, Rainfall__mm_ = 0.0)
dry_month <- filter(mydf, Rainfall__mm_ == 0.0)
View(dry_month)
dry_group_by_month <- group_by(dry_month, Month)
View(dry_group_by_month)
dry_group_by_year <- group_by(dry_month, Year)
View(dry_group_by_year)
View(dry_group_by_year)
aggregate( dry_month ~ Month)
View(dry_month)
aggregate( Month , dry_month)
View(grouped_by_month)
dry_group_by_month <- group_by(dry_month, Month)
View(dry_group_by_month)
aggregate(Rainfall__mm_  ~ Month , dry_month , mean)
aggregate(Rainfall__mm_  ~ Month + Year , dry_month , mean)
View(dry_group_by_year)
aggregate(Rainfall__mm_  ~ Month + Year , mydf , mean)
aggregate(Rainfall__mm_  ~ Month + Year , mydf , FUN = sum )
monthly_rainfall <- aggregate(Rainfall__mm_  ~ Month + Year , mydf , FUN = sum )
# 1- What month had the highest proportion of cancelled flights?
cancelled_flights <- filter(flights, is.na(air_time))
grouped_by_month <- group_by(cancelled_flights, month)
counts_per_month <- summarise(grouped_by_month, count = n())
highest_prop <- summarise(counts_per_month, max_month= month[which.max(count)], max_value= max(count))
# 2- What month had the lowest?
month_with_min <- summarise(counts_per_month, month= which.min(count))
rlang::last_error()
rlang::last_trace()
View(monthly_rainfall)
counts_per_month <- summarise(grouped_by_month, count = n())
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
install.packages("plyr")
library("plyr")
counts_per_month <- summarise(grouped_by_month, count = n())
counts_per_month <- dplyr::summarise(grouped_by_month, count = n())
View(counts_per_month)
highest_prop <- summarise(counts_per_month, max_month= month[which.max(count)], max_value= max(count))
View(highest_prop)
View(counts_per_month)
View(counts_per_month)
View(dry_month)
View(dry_month)
View(monthly_rainfall)
dry_month <-
summarise(monthly_rainfall, year= Year[which.min(count)],
driest_month= Month[which.min(count)],
driest_value= min(count))
dry_month <-
summarise(monthly_rainfall, year= Year[which.min(sum)],
driest_month= Month[which.min(sum)],
driest_value= min(sum))
dry_month <-
summarise(monthly_rainfall, year= Year[which.min(sum)],
driest_month= Month[which.min(sum)],
driest_value= min(sum))
dry_month <-
summarise(monthly_rainfall, year= Year[which.min(FUN)],
driest_month= Month[which.min(FUN)],
driest_value= min(FUN))
dry_month <-
summarise(monthly_rainfall, year= Year[which.min(sum)],
driest_month= Month[which.min(sum)],
driest_value= min(sum))
class(monthly_rainfall$Rainfall__mm_)
class(monthly_rainfall$Month)
class(monthly_rainfall$Year)
dry_month <-
summarise(monthly_rainfall, year= Year[which.min(monthly_rainfall$Rainfall__mm_)],
driest_month= Month[which.min(Rainfall__mm_)],
driest_value= min(Rainfall__mm_))
View(dry_month)
print("There is no dry month")
if (0.0 %in% monthly_rainfall$Rainfall__mm_){
dry_month <-
summarise(monthly_rainfall, year= Year[which.min(monthly_rainfall$Rainfall__mm_)],
driest_month= Month[which.min(sum)],
driest_value= min(sum))
} else {
print("There is no dry month")
}
View(mydf)
View(mydf)
monthly_humidity <- aggregate(X9am_relative_humidity____ +X3pm_relative_humidity____
~ Month + Year , mydf , FUN = sum )
View(monthly_humidity)
View(monthly_humidity)
monthly_humidity2019 <- aggregate(X9am_relative_humidity____ +X3pm_relative_humidity____
+                               ~ Month + Year(2019) , mydf , FUN = sum)
monthly_humidity <- aggregate(X9am_relative_humidity____ +X3pm_relative_humidity____
~ Month + Year , mydf , FUN = sum )
while (monthly_humidity$Year == 2019){}
while (monthly_humidity$Year == 2019){}
while (> monthly_humidity$Year == 2019){}
monthly_humidity <- aggregate(X9am_relative_humidity____+X3pm_relative_humidity____
~ Month + Year , mydf , FUN = sum )
View(monthly_humidity)
highest_humidity_2019 <- summarise(monthly_humidity,
max_month= month[which.max(X9am_relative_humidity____+X3pm_relative_humidity____)],
max_value= max(X9am_relative_humidity____+X3pm_relative_humidity____))
if (0.0 %in% monthly_rainfall$Rainfall__mm_){
dry_month <-
summarise(monthly_rainfall, year= Year[which.min(monthly_rainfall$Rainfall__mm_)],
driest_month= Month[which.min(Rainfall__mm_)],
driest_value= min(Rainfall__mm_))
} else {
print("There is no dry month")
}
while (monthly_humidity$Year == 2019){
highest_humidity_2019 <- summarise(monthly_humidity,
max_month= Month[which.max(X9am_relative_humidity____+X3pm_relative_humidity____)],
max_value= max(X9am_relative_humidity____+X3pm_relative_humidity____))
}
while (monthly_humidity$Year == "2019"){
highest_humidity_2019 <- summarise(monthly_humidity,
max_month= Month[which.max(X9am_relative_humidity____+X3pm_relative_humidity____)],
max_value= max(X9am_relative_humidity____+X3pm_relative_humidity____))
}
while (monthly_humidity$Year == "2019"){
highest_humidity_2019 <- summarise(monthly_humidity,
max_month= Month[which.max(X9am_relative_humidity____+X3pm_relative_humidity____)],
max_value= max(X9am_relative_humidity____+X3pm_relative_humidity____))
}
View(highest_prop)
view(highest_humidity_2019)
View(highest_humidity_2019)
View(monthly_humidity)
highest_humidity_2019 <- summarise(monthly_humidity,
max_month= Month[which.max(X9am_relative_humidity____+X3pm_relative_humidity____)],
max_value= max(X9am_relative_humidity____+X3pm_relative_humidity____))
highest_humidity_2019 <- summarise(monthly_humidity,
max_month= Month[which.max(`X9am_relative_humidity____ + X3pm_relative_humidity____`)],
max_value= max(`X9am_relative_humidity____ + X3pm_relative_humidity____`))
View(highest_humidity_2019)
gender <- sample( c("Male", "Female", "Not-mentioned"), 100, replace=TRUE)
gender <- sample( c("Male", "Female", "Not-mentioned"), 100, replace=TRUE)
gender <- sample( c("Male", "Female", "Not-mentioned"), 100, replace=TRUE)
subject <- sample( c("Math", "Science", "Other"), 100, replace=TRUE)
data <- tibble(gender, subject)
View(data)
p(Math) = _________
p(Math)
library(ggplot2)
p(Math)
library(tidyverse)
#extract the feqs of gender
gen_feq <- table(data$gender)
gen_subject_feq <- table(data$gender, data$subject)
#Find the probability that the student chose math as his favourite subject
math_proportions <- prop.table(gen_subject_feq)
View(gen_subject_feq)
#Find the probability that the student chose math as his favourite subject
proportions <- prop.table(gen_subject_feq)
data %>% group_by(subject) %>% summarize(couns n())
prop.table(table(data$subject))
aa <- prop.table(table(data$subject))
aa('Math')
aa['Math']
prop.table(table(data$gender, data$subject))
margin.table(table(data$gender, data$subject))
margin.table(prop.table(table(data$gender, data$subject)))
#or
margin.table(proportions, 2)["Math"]
#p(Male)
margin.table(proportions, 2)["Male"]
proportions["Male"]
proportions["Male","Female]
proportions["Male","Female]
proportions["Male","Female"]
#p(Male)
margin.table(proportions, 1)["Math"]
#p(Male)
margin.table(proportions, 1)["Male"]
#p(Female | Math)
proportions["Female","Math"]/margin.table(proportions, 2)["Math"]
#p(Science | Female)
proportions["Female","Science"]/margin.table(proportions, 2)["Female"]
#p(Science | Female)
proportions["Female","Science"]/margin.table(proportions, 1)["Female"]
#Exercise2
v<-(199, 201, 236, 269,271,278,283,291, 301, 303,341)
#Exercise2
v <- c(199, 201, 236, 269,271,278,283,291, 301, 303,341)
summary(v)
#1- compute the three quartiles and the inter-quartile range.
median(v)
first_qu <- s_data("1st Qua.")
s_data <- summary(v)
s_data <- summary(v)
#1- compute the three quartiles and the inter-quartile range.
median(v)
first_qu <- s_data("1st Qua.")
first_qu <- s_data["1st Qua."]
s_data["1st Qua."]
s_data["1st Qu."]
third_qu <- s_data["3rd Qu."]
IQR <- third_qu - first_qu
IQR
View(IQR)
View(monthly_humidity)
View(mydf)
monthly_temperature <- aggregate(Minimum_temperature
~ Month + Year , mydf , FUN = sum )
view(monthly_temperature)
monthly_temperature <- aggregate(Minimum_temperature
~ Month + Year , mydf , min)
view(monthly_temperature)
monthly_min_temperature <- aggregate(Minimum_temperature
~ Month + Year , mydf , min )
view(monthly_temperature)
monthly_max_temperature <- aggregate(Maximum_temperature
~ Month + Year , mydf , max )
view(monthly_max_temperature)
